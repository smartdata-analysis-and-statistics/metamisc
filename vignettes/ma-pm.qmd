---
title: "Meta-analysis of prediction model performance"
author:
  - name: Thomas Debray
    orcid: 0000-0002-1790-2719
date: last-modified
date-format: "[Last Updated on] DD MMMM, YYYY"
format:
  html:
    code-overflow: wrap
    code-fold: false
    toc: true
    number-sections: true
    css: styles.css
bibliography: "https://api.citedrive.com/bib/093a08ac-0337-479e-a147-17929fa7f7b0/references.bib?x=eyJpZCI6ICIwOTNhMDhhYy0wMzM3LTQ3OWUtYTE0Ny0xNzkyOWZhN2Y3YjAiLCAidXNlciI6ICI0MDA5IiwgInNpZ25hdHVyZSI6ICIwOWJiZjg2ZDJiNjk1NmQ1ODVhZTMxZmZiODI0OTgyNWYxYTEzNTQ5MzdiZjBiNzJiZjY3MTlhMTE2NGJhNzQ3In0=/bibliography.bib"
---


```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = FALSE,
  message = FALSE,
  warning = FALSE,
  tidy = TRUE
)
```

```{r}
#| echo: FALSE
library(knitr)
library(dplyr)
```

# Introduction

The [EuroSCORE II](http://www.euroscore.org/calc.html) is a commonly used scoring rule for estimating the risk of in-hospital mortality in  patients undergoing major cardiac surgery. It was developed using data from  16,828 adult patients from 43 countries. Predictors include patient characteristics (e.g. age, gender), cardiac related factors (e.g. recent MI) and surgery related factors (e.g. Surgery on thoracic aorta). In 2014, a systematic review was undertaken by @guida_performance_2014 to search articles assessing the performance of EuroSCORE II on perioperative mortality in cardiac surgery. The systematic review identified 24 eligible validation studies, 22 studies were included in the main analysis. 

In this case study, we summarize the results from these 22 studies, as well as the results from the split-sample validation contained within original development article of EuroSCORE II. We will use the **metamisc** package to derive summary estimates for the discrimination and calibration performance of EuroSCORE II, to evaluate the presence of between-study heterogeneity, and to identify potential sources of between-study heterogeneity. A step-by-step tutorial is provided by @debray_guide_2017. 

We can load the data from all 23 validation studies as follows:

```{r}
library(metamisc)
data(EuroSCORE)
```



# Meta-analysis of discrimination performance

This section summarizes the discrimination performance of the EuroSCORE II prediction model when externally validated in patients undergoing coronary artery bypass grafting (CABG). The data are based on 23 validation studies identified in a systematic review, with model performance assessed using the concordance index (c-index). These studies vary considerably in size and event rates, reflecting diverse clinical settings and populations. The table below presents the reported c-indices with corresponding confidence intervals (and standard errors where available), alongside the number of events and total sample size per study.

```{r, echo = F}
out <- EuroSCORE %>%
  mutate(
    `Events / Patients` = paste0(n.events, " / ", n),
    `C-index (SE, 95% CI)` = mapply(function(c, se, lb, ub) {
      parts <- sprintf("%.3f", c)

      has_se <- !is.na(se)
      has_ci <- !is.na(lb) && !is.na(ub)

      if (has_se) parts <- paste0(parts, sprintf(" (SE = %.3f", se))
      if (has_ci) {
        ci_str <- sprintf("%s95%% CI: %.3f; %.3f", if (has_se) ", " else " (", lb, ub)
        parts <- paste0(parts, ci_str, ")")
      } else if (has_se) {
        parts <- paste0(parts, ")")
      }

      parts
    }, c.index, se.c.index, c.index.95CIl, c.index.95CIu)
  ) %>%
  select(Study, `Events / Patients`, `C-index (SE, 95% CI)`)

kable(
  out,
  col.names = c("Study", "Events / Patients", "C-index (SE, 95% CI)"),
  align = "lll"
)
```

To summarize the c-index across external validation studies, we use the [`valmeta()`](https://smartdata-analysis-and-statistics.github.io/metamisc/reference/valmeta.html) function. This function automatically derives the logit-transformed c-statistics and their standard errors based on the reported values. When the standard error is not directly available, it is reconstructed using available study-level information (e.g., number of events and non-events).

The meta-analysis is performed on the logit-c scale, which helps stabilize the variance and supports the assumptions of normality. [`valmeta()`](https://smartdata-analysis-and-statistics.github.io/metamisc/reference/valmeta.html) then applies a random-effects model using restricted maximum likelihood (REML) estimation and constructs Hartung-Knapp-Sidik-Jonkman (HKSJ) adjusted confidence intervals to account for between-study heterogeneity.

```{r echo = F}
fit <- valmeta(cstat = c.index, cstat.se = se.c.index, 
               cstat.cilb = c.index.95CIl, cstat.ciub = c.index.95CIu, 
               N = n, O = n.events, method = "REML", test = "knha",
               slab = Study, data = EuroSCORE)
```

```{r}
valmeta(cstat = c.index, cstat.se = se.c.index, 
        cstat.cilb = c.index.95CIl, cstat.ciub = c.index.95CIu, 
        N = n, O = n.events, method = "REML", test = "knha",
        slab = Study, data = EuroSCORE)
```

The summary estimate of the average logit-C statistic was `r sprintf("%.3f", fit$fit$beta)` (95% CI: `r sprintf("%.3f", fit$fit$ci.lb)` to `r sprintf("%.3f", fit$fit$ci.ub)`), which corresponds to a summary c-statistic of 1/(1 + exp(-`r sprintf("%.3f", fit$fit$beta)`)) = `r sprintf("%.2f", fit$est)`. There was substantial heterogeneity ($\tau^2$ = `r sprintf("%.3f", fit$fit$tau2)` with SE = `r sprintf("%.3f", fit$fit$se.tau2)`, on the logit-C scale), reflected by a 95% prediction interval of `r sprintf("%.2f", fit$pi.lb)` to `r sprintf("%.2f", fit$pi.ub)` for the true c-statistic in a new study, which suggests a wide range of potential discrimination performance across settings.

The figure below provides a forest plot summarizing the estimated c-statistics across external validation studies.

```{r}
#| echo: FALSE
#| fig-width: 7
#| fig-height: 6
plot(fit)
```

We can also adopt a Bayesian random-effects model to summarize the c-statistic. In the example below, we specify a weakly informative prior distribution for the between-study heterogeneity, with $\tau \sim \text{Uniform}(0, 2))$. Additionally, we define a minimum clinically meaningful C-statistic, set here at 0.7, and estimate the posterior probability that the C-statistic in a new study exceeds this threshold, using the argument `min.cstat = 0.7`:

```{r}
#| message: false
#| warning: false
valmeta(cstat = c.index, cstat.se = se.c.index, 
        cstat.cilb = c.index.95CIl, cstat.ciub = c.index.95CIu, 
        N = n, O = n.events, method = "BAYES",
        pars = list(
          hp.tau.dist = "dunif", 
          hp.tau.min = 0, 
          hp.tau.max = 2,
          min.cstat = 0.7   # minimum acceptable value
        ),
        slab = Study, data = EuroSCORE)
```


# Meta-analysis of calibration performance
Calibration refers to a model's accuracy of predicted risk probabilities, and indicates the extent to which expected outcomes (predicted from the model) and observed outcomes agree. Summarising estimates of calibration performance is challenging because calibration plots are most often not presented, and because studies tend to report different types of summary statistics in calibration. For example, in the case study, calibration was assessed using the Hosmer-Lemeshow test, calibration plots or by comparing the observed mortality to the predicted EuroSCORE II (either overall or for groups of patients). Within each validation study, we can compare the total	number	of observed events (O) with the total number of expected (predicted)	events by deriving their ratio O:E. The total O:E ratio provides a rough indication of the overall model calibration (across the entire range of predicted risks). It	describes	whether	more	(O:E	>	1)	or	fewer	(O:E	<	1)	events	occurred		than	expected	 based	on	the	model. Whilst the O:E ratio itself was not explicitly reported in all studies, it can be calculated from other reported information:

```{r}
EuroSCORE <- EuroSCORE %>% mutate(oe = n.events/e.events)
```

The O:E ratio can also be derived from the observed and predicted mortality risk `Po` and, respectively, `Pe`:

```{r, eval = F}
EuroSCORE %>% select(Po, Pe) %>% mutate(oe = Po/Pe)
```

It is recommended to first transform extracted O:E ratios to	the	log (natural logarithm) scale before applying a meta-analysis.

```{r}
EuroSCORE <- EuroSCORE %>% mutate(logoe = log(oe))
```

# References
